import os
import openpyxl
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, BotCommand
from telegram.ext import (Application, CommandHandler, CallbackQueryHandler,
                          ConversationHandler, ContextTypes, MessageHandler, filters)
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("TOKEN")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ 6 –∑–Ω–∞–∫–æ–≤: AA1231
(STEP_1, STEP_2, STEP_3, STEP_4, STEP_5, STEP_6, SHOW_RESULT) = range(7)

# –ü—É—Ç—å –∫ Excel-—Ñ–∞–π–ª—É —Å —Ä–∞–∑–±–∞–ª–æ–≤–∫–æ–π
EXCEL_PATH = "–°–µ—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–¥–∞–Ω–∏—è (1).xlsx"

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel (–±—É–¥–µ—Ç –¥–æ—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è)
def load_scoring_data():
    wb = openpyxl.load_workbook(EXCEL_PATH, data_only=True)
    data = {}
    # –ø—Ä–∏–º–µ—Ä: data['period'] = {'–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∏': 'A', ...}
    # –∑–∞–≥–ª—É—à–∫–∞
    return data

data_from_excel = load_scoring_data()

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ —Å–∏—Å—Ç–µ–º–µ AA1231", callback_data="start_calc")],
        [InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    else:
        await update.callback_query.edit_message_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
async def support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.edit_message_text("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: support@example.com")

# –ù–∞—á–∞–ª–æ —Ä–∞—Å—á—ë—Ç–∞
async def start_calc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.callback_query.edit_message_text("1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –∑–¥–∞–Ω–∏—è:")
    return STEP_1

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —à–∞–≥–æ–≤ (–±—É–¥—É—Ç –¥–æ—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –ø–æ–¥ –≤–∞—Ä–∏–∞–Ω—Ç—ã)
async def handle_step_1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['step_1'] = update.message.text
    await update.message.reply_text("2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω:")
    return STEP_2

async def handle_step_2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['step_2'] = update.message.text
    await update.message.reply_text("3Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ —ç—Ç–∞–∂–Ω–æ—Å—Ç—å, –Ω–∞–ª–∏—á–∏–µ –ª–∏—Ñ—Ç–æ–≤ –∏ –¥—Ä. –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
    return STEP_3

async def handle_step_3(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['step_3'] = update.message.text
    await update.message.reply_text("4Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:")
    return STEP_4

async def handle_step_4(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['step_4'] = update.message.text
    await update.message.reply_text("5Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ö–æ–∑.–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:")
    return STEP_5

async def handle_step_5(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['step_5'] = update.message.text
    await update.message.reply_text("6Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã:")
    return STEP_6

async def handle_step_6(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['step_6'] = update.message.text
    # –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–¥–∞ AA1231
    code = "AA1231"  # –∑–∞–≥–ª—É—à–∫–∞
    await update.message.reply_text(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {code}")
    return ConversationHandler.END


def main():
    app = Application.builder().token(TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_calc, pattern="^start_calc$")],
        states={
            STEP_1: [CommandHandler("start", start), MessageHandler(filters.TEXT & ~filters.COMMAND, handle_step_1)],
            STEP_2: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_step_2)],
            STEP_3: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_step_3)],
            STEP_4: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_step_4)],
            STEP_5: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_step_5)],
            STEP_6: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_step_6)],
        },
        fallbacks=[CommandHandler("start", start)]
    )

    app.add_handler(conv)
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(support, pattern="^support$"))

    async def set_commands(_: Application):
        await app.bot.set_my_commands([BotCommand("start", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])

    app.post_init = set_commands
    app.run_polling()

if __name__ == "__main__":
    main()
